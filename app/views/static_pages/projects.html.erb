<div class='nav'>
  <%= link_to 'Home', home_path, class: 'nav-item' %>
  <%= link_to 'Projects', projects_path, class: 'nav-item' %>
  <%= link_to 'About', about_path, class: 'nav-item' %>
  <%= link_to 'Contact Me', contact_path, class: 'nav-item' %>
</div>
<div class='profile'>
  <div class='profile-pic-icons'>
      <%= image_tag 'ruby.png', class: 'ico-lg' %>
      <%= image_tag 'rails.png', class: 'ico-lg' %>
      <%= image_tag 'postgres.png', class: 'ico-lg' %>
    <figure>
      <%= image_tag 'Profilepic.png', id: 'profile-pic' %>
      <figcaption>Jordan Whistler</figcaption>
    </figure>
      <%= image_tag 'node.png', class: 'ico-lg' %>
      <%= image_tag 'git.png', class: 'ico-lg' %>
      <%= image_tag 'trio.png', class: 'ico-lg trio' %>
  </div>
</div>
<div class='column-container'>
  <div class='left-column'>
    <div class='col-item'>
      <h3><a href='https://rubygems.org/gems/changer' target='_blank'>'Changer' RubyGem</a></h3>
      <p>A solo project I did over a few nights to brush up on my Ruby after working on Javascript and HTML/CSS for a month or so.  This is a small RubyGem that creates
         currency objects using an API to interact with ExchangeRatesAPI.  It can translate one currency to another, and do math directly between different currencies, 
         returning the result in the currency of the users choice, without the user having to handle looking up rates or formatting of the output.  It currently has over 1,000 downloads.
      </p>
      <p>Test suite with 120+ test assertions using MiniTest was included in this simple gem.
      <p>Currently, <b><%= @dollar %> = <%= "EUR #{@euro.value}" %></b></p>
    </div>
    <div class='col-item'>
      <h3><a href='https://jw-weight-tracker-project.herokuapp.com/' target='_blank'>Weight Tracker App</a></h3>
      <p>This is a demonstration application that uses a PostgreSQL database for persistence in storing various health metrics as well as 
          encrypted user passwords.  I also use session persistence here to maintain logged in status across pages.
      </p>
      <p>The database side of this app consists of a two-table database-- one for users, and one for logs with a one-to-many relationship.</p>
      <p>
      This project was built on the Sinatra framework and deployed on Heroku.
      </p>
      <figure>
        <%= image_tag 'weight.png', class: 'chess-pic' %>
        <figcaption>Publicly accessible demo user</figcaption>
      </figure>
      <figure>
        <%= image_tag 'chart.png', class: 'chess-pic' %>
        <figcaption>Charting of user data included using Chartkick.js</figcaption>
      </figure>
    </div>
    <div class='col-item'>
      <h3>Command Line Games - Ruby</h3>
      <h4><a href='https://github.com/JWhist/RB120/blob/master/Lesson%204/Hangman/hangman.rb' target='_blank'>Hangman</a></h4>
      <p>An exercise in Object-Oriented Programming, using Ruby.  This is a small program
      that uses separate dictionary and yaml files in tandem with a module and custom classes to creates
      a simple hangman "guess the word" game.</p>
      <figure>
        <%= image_tag 'hang.png', class: 'chess-pic' %>
      </figure>
      <h4><a href='https://github.com/JWhist/RB120/blob/master/Lesson%205/oop_21.rb' target='_blank'>21</a></h4>
      <p>A command line poker game created as an exercise in Object Oriented Programming.</p>
      <figure>
        <%= image_tag 'poker.png', class: 'chess-pic' %>
        <figcaption>Early attempts at ASCII art!</figcaption>
      </figure>
    </div>
  </div>
</div>
